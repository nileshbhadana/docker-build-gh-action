name: 'Hello World'
description: 'Greet someone'
inputs:
  who-to-greet:  # id of input
    description: 'Who to greet'
    required: true
    default: 'World'
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Docker Context for Buildx
      run: |
        docker context create builders
      shell: bash 
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        endpoint: builders

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: '${{ env.ECR_REGION }}'


    - name: Docker metadata extraction
      id: meta
      uses: docker/metadata-action@v4
      with:
        flavor: |
          latest=false
        images: |
          ${{ env.ECR_REGISTRY }}/${{ env.REPO_NAME }}
        tags: |
          type=semver,pattern={{raw}}
          type=sha,prefix=

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Get Tags
      id: get_tags
      run: |
        echo "::set-output name=image_tags::$(echo $DOCKER_TAGS | cut -d " " -f1 | cut -d ":" -f2)"
      shell: bash         
      env:
        DOCKER_TAGS: ${{ steps.meta.outputs.tags }}

    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.19.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        # For posting a simple plain text message
        slack-message: |
          GitHub build result: ${{ job.status }}
          ${{ github.event.pull_request.html_url || github.event.head_commit.url }} 
          Deploy your release from here: 
          With following parameters:
          - app_name: `${{ env.REPO_NAME }}`
          - app_version: `${{ steps.get_tags.outputs.image_tags }}`
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}